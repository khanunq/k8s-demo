pipeline {
  agent any

  parameters {
    choice(name: 'START_ACTIVE', choices: ['blue', 'green'], description: 'Color currently serving traffic')
    string(name: 'NEW_TAG', defaultValue: '${BUILD_NUMBER}', description: 'Image tag to deploy')
  }

  environment {
    REGISTRY = 'docker.io'
    DOCKER_USER = 'zk0061'
    IMAGE = "${env.REGISTRY}/${env.DOCKER_USER}/demo-web"
    // <<< KEY FIX: always use Minikube’s kubectl >>>
    KUBECTL = 'minikube kubectl --'
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Build & Tag') {
      steps {
        sh '''
          set -eux
          docker build -t ${IMAGE}:${NEW_TAG} .
          docker tag ${IMAGE}:${NEW_TAG} ${IMAGE}:latest
        '''
      }
    }

    stage('Push') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DU', passwordVariable: 'DP')]) {
          sh '''
            set -eux
            echo "$DP" | docker login -u "$DU" --password-stdin ${REGISTRY}
            docker push ${IMAGE}:${NEW_TAG}
            docker push ${IMAGE}:latest
          '''
        }
      }
    }

    stage('Render Manifests') {
      steps {
        sh '''
          set -eux
          TAG=${NEW_TAG} DOCKER_USER=${DOCKER_USER} ./scripts/render.sh
        '''
      }
    }

    stage('Deploy to IDLE color') {
      steps {
        withCredentials([file(credentialsId: 'kubeconfig', variable: 'KCF')]) {
          withEnv(["KUBECONFIG=${KCF}"]) {
            script {
              def idle = (params.START_ACTIVE == 'blue') ? 'green' : 'blue'
              echo "Active is ${params.START_ACTIVE}; deploying to IDLE=${idle}"

              if (idle == 'green') {
                sh '''
                  set -eux
                  $KUBECTL apply -f /tmp/deploy-green.yaml
                  $KUBECTL apply -f /tmp/service.yaml
                  $KUBECTL rollout status deploy/demo-web-green --timeout=120s
                '''
              } else {
                sh '''
                  set -eux
                  $KUBECTL apply -f /tmp/deploy-blue.yaml
                  $KUBECTL apply -f /tmp/service.yaml
                  $KUBECTL rollout status deploy/demo-web-blue --timeout=120s
                '''
              }
              currentBuild.description = "IDLE=${idle}, TAG=${params.NEW_TAG}"
            }
          }
        }
      }
    }

    stage('Health check (IDLE)') {
      steps {
        withCredentials([file(credentialsId: 'kubeconfig', variable: 'KCF')]) {
          withEnv(["KUBECONFIG=${KCF}"]) {
            sh '''
              set -eux
              # basic readiness: ensure at least one Ready pod for the IDLE color
              IDLE_SELECTOR=$([ "${START_ACTIVE}" = "blue" ] && echo "green" || echo "blue")
              $KUBECTL get pods -l app=demo-web,color=${IDLE_SELECTOR}
              $KUBECTL wait --for=condition=Ready pod -l app=demo-web,color=${IDLE_SELECTOR} --timeout=60s
            '''
          }
        }
      }
    }

    stage('Switch traffic') {
      steps {
        withCredentials([file(credentialsId: 'kubeconfig', variable: 'KCF')]) {
          withEnv(["KUBECONFIG=${KCF}"]) {
            sh '''
              set -eux
              TARGET=$([ "${START_ACTIVE}" = "blue" ] && echo "green" || echo "blue")

              # point the Service at the new color
              $KUBECTL patch svc demo-web-svc -p "{\"spec\":{\"selector\":{\"app\":\"demo-web\",\"color\":\"${TARGET}\"}}}"

              # show where traffic goes now
              $KUBECTL get svc demo-web-svc -o jsonpath="{.spec.selector.color}"; echo
            '''
          }
        }
      }
    }
  }

  post {
    success {
      echo "✅ Blue/Green switch complete. Now serving the IDLE color."
    }
    failure {
      echo "❌ Failed before switch; traffic remains on START_ACTIVE=${params.START_ACTIVE}"
    }
  }
}
